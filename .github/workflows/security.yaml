---
# ModelMuxer (c) 2025 Ajay Rajput
# Licensed under Business Source License 1.1 â€“ see LICENSE for details.

name: Security Scan

"on":
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]
  schedule:
    # Run daily at 3 AM UTC for comprehensive security monitoring
    - cron: "0 3 * * *"

env:
  PYTHON_VERSION: "3.11"
  POETRY_VERSION: "1.7.1"

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Install dependencies
        run: poetry install --with dev

      - name: Run Bandit Security Scan
        run: |
          poetry run bandit -r app/ -f json -o bandit-report.json || true
          poetry run bandit -r app/ -f txt -o bandit-report.txt || true

      - name: Run Safety Check (Dependency Vulnerabilities)
        run: |
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check --output safety-report.txt || true

      - name: Run pip-audit (Additional Dependency Check)
        run: |
          poetry run pip-audit --format=json \
            --output=pip-audit-report.json || true
          poetry run pip-audit --format=cyclonedx-json \
            --output=pip-audit-sbom.json || true

      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "## Bandit Results" >> security-summary.md
          if [ -f bandit-report.txt ]; then
            echo '```' >> security-summary.md
            head -20 bandit-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          else
            echo "No Bandit issues found âœ…" >> security-summary.md
          fi
          echo "" >> security-summary.md
          echo "## Safety Results" >> security-summary.md
          if [ -f safety-report.txt ]; then
            echo '```' >> security-summary.md
            head -20 safety-report.txt >> security-summary.md
            echo '```' >> security-summary.md
          else
            echo "No Safety issues found âœ…" >> security-summary.md
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_number }}
          path: |
            bandit-report.json
            bandit-report.txt
            safety-report.json
            safety-report.txt
            pip-audit-report.json
            pip-audit-sbom.json
            security-summary.md
          retention-days: 30

      - name: Comment Security Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('security-summary.md')) {
              const summary = fs.readFileSync('security-summary.md', 'utf8');
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## ðŸ”’ Security Scan Results\n\n${summary}`
              });
            }

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ["python"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        run: pip install poetry==${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry config virtualenvs.create false
          poetry install --only=main

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
          deny-licenses: GPL-2.0, GPL-3.0

  security-scorecard:
    name: OSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload SARIF results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif
