[tool.poetry]
name = "modelmuxer"
version = "1.0.0"
description = "Enterprise-grade intelligent LLM routing engine for cost and performance optimization"
authors = ["Ajay Rajput <ajay@modelmuxer.com>"]
license = "Business Source License 1.1"
readme = "README.md"
homepage = "https://github.com/ajayrajput/modelmuxer"
repository = "https://github.com/ajayrajput/modelmuxer"
documentation = "https://modelmuxer.readthedocs.io"
keywords = [
    "llm",
    "routing",
    "ai",
    "cost-optimization",
    "api",
    "enterprise",
    "cascade-routing",
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
packages = [{ include = "app" }]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.116.1"
uvicorn = { extras = ["standard"], version = "^0.35.0" }
httpx = "^0.28.1"
pydantic = "^2.5.0"
pydantic-settings = "^2.1.0"
# Replaced python-jose with pyjwt for better security
python-multipart = "^0.0.18"
redis = "^5.0.0"
sqlalchemy = "^2.0.0"
alembic = "^1.12.0"
aiosqlite = "^0.21.0"
structlog = "^23.2.0"
# Tiktoken for OpenAI tokenization and LiteLLM compatibility
tiktoken = "^0.7.0"
tenacity = "^8.2.0"
cachetools = "^5.3.0"
psutil = "^5.9.0"
pyjwt = { extras = ["cryptography"], version = "^2.10.1" }
# LiteLLM for unified LLM API access
litellm = "^1.55.0"
# Enterprise features
asyncpg = "^0.30.0"
cryptography = "^44.0.2"
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
email-validator = "^2.1.0"
# Security fixes for vulnerabilities - using cryptography instead of ecdsa
bleach = "^6.2.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
pytest-env = "^1.1.3"
pytest-benchmark = "^4.0.0"
black = "^24.3.0"
ruff = "^0.1.0"
mypy = "^1.7.0"
pre-commit = "^3.5.0"
bandit = "^1.7.5"
safety = "^2.3.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
pip-audit = "^2.6.0"
types-psutil = "^7.0.0.20250801"
interrogate = "^1.7.0"
pip-licenses = "^5.0.0"

[tool.poetry.group.jupyter]
optional = true

[tool.poetry.group.jupyter.dependencies]
ipython = "^8.0.0"
jupyter = "^1.0.0"

[tool.poetry.group.ml]
optional = true

[tool.poetry.group.ml.dependencies]
sentence-transformers = "^3.1.0"
# NOTE: CVE-2025-3730 affects torch <= 2.7.1 - waiting for 2.7.2+ release
# Vulnerability: PyTorch Improper Resource Shutdown (Low severity, local attack only)
torch = ">=2.7.1,<3.0.0"
transformers = "^4.30.0"
datasets = "^2.14.0"
numpy = "^1.24.0"
scikit-learn = "^1.3.0"

[tool.poetry.group.monitoring]
optional = true

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.19.0"
opentelemetry-api = "^1.20.0"
opentelemetry-sdk = "^1.20.0"
opentelemetry-instrumentation-fastapi = "^0.41b0"

[tool.poetry.scripts]
modelmuxer = "app.main:cli"
modelmuxer-server = "app.main:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = false
disallow_incomplete_defs = false
disallow_untyped_defs = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_return_any = false
strict_equality = true
# Exclude problematic modules during migration to zero errors
exclude = [
    "app/routing/*",
    "app/providers/*",
    "app/config/enhanced_config.py",
    "app/classification/*",
    "app/main.py",
    "app/router.py",
    "app/database.py",
    "app/cost_tracker.py",
    "app/security/*",
    "app/middleware/*",
    "app/enterprise/*",
    "tests/*",
]

[[tool.mypy.overrides]]
module = [
    "sentence_transformers.*",
    "sklearn.*",
    "prometheus_client.*",
    "tiktoken.*",
]
ignore_missing_imports = true

# Temporarily allow untyped defs in complex modules during migration
[[tool.mypy.overrides]]
module = ["app.routing.*", "app.cache.*", "app.providers.*", "tests.*"]
disallow_untyped_defs = false
disallow_incomplete_defs = false
warn_return_any = false
disallow_any_generics = false
no_implicit_optional = false

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = ["error", "ignore::UserWarning", "ignore::DeprecationWarning"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["app"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
# Bandit security linting configuration
exclude_dirs = ["tests", ".venv", "htmlcov"]
# Exclude test files
exclude = ["*/test_*.py", "**/test_*.py"]
